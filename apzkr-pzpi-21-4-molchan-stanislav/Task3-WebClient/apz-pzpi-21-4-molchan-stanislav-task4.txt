1 МЕТА РОБОТИ

Мета роботи полягає в клієнтської програмної системи та створенні звіту, що містить опис інженерних рішень з посиланнями на програмний код. Під час виконання лабораторної роботи має бути розроблено чотири діаграми, а саме: UML діаграма компонентів, UML діаграма взаємодії, UML діаграма прецедентів та UML діаграму діяльності.

2 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ

Після того, як всі сутності визначені, слід перейти до визначення основних сценаріїв використання програмної системи. Для цього найкраще підходе UML діаграма прецедентів. Після аналізу функціоналу, котрий був визначений у документі Vision & Scope, була розроблена UML діаграма прецедентів(див. рис. Б.2
у додатку Б), в котрій присутні п’ять акторів, а саме: гість, користувач, бізнес користувач, адміністратор, бізнес адміністратор та ІоТ. Всі актори отримали весь раніше визначений функціонал. Гість може зареєструватися або увійти до системи.
Користувач може змінювати особисту інформацію, переглядати створювати та переглядати свої колекції, додавати та видаляти речі з них. Також він має можливість переглянути особисті пропозиції від брендів та статистику його використань.
Бізнес користувач може додавати, редагувати та видаляти інформацію про бренд. Він має змогу формувати статистику по сезонах, топ речей по використанню за обраний час та перегляд комбінацій речей, котрі використовують користувачі. Адміністратор може змінювати будь-які дані в базі даних та отримувати
необхідну інформацію. Бізнес адміністратор може створювати резервні копії бази даних у форматі  .csv. Останній актор, це ІоТ пристрій і він може змінювати статус мітки та
оновлювати кількість використань. В результаті концептуального моделювання предметної області, було розроблено дві діаграми та визначені основні сутності програмної системи. Тепер можна перейти до реалізації інженерних рішень.
Для того, щоб детальніше розібратися з ролями користувачів у системі, було розроблено UML діаграму станів ролі користувача (див. рис. 2.1). Першим етапом,після якого усі користувачі отримують роль “Користувач”, є реєстрація. Для того, щоб користувач отримав роль “Бізнес”, йому треба укласти договір та надати докази, що бренд, котрий він представляє, дійсно його. Роль “Адміністратор”, можна отримати лише від іншого користувача, котрий вже має таку роль.
Після того, як всі актори та функціонал для них визначені, слід розробити діаграму компонентів, котра відображає, як система розділена на компоненти і як саме ці компоненти взаємодіють між собою. На діаграмі (див. рис. 2.2) визначені компоненти клієнтської частини системи, а саме сторінок та їх взаємодія між собою.
Головним компонентом виступає навігаційна панель, яка є центром додатку. За допомогою неї користувач може отримати доступ до різних функцій системи, таких як вхід, реєстрація, особистий кабінет, бонуси, статистика, колекції та бренди. Для адміністратора панель також надає важливий функціонал, зокрема перегляд користувачів та можливість резервного копіювання таблиць бази даних у форматі CVS.
Сторінка "Колекції" відображає всі колекції користувача і включає підкомпоненти для створення, редагування та перегляду колекцій. Важливим елементом є сторінка "Предмети", яка відображає всі предмети в колекціях і містить підкомпоненти для додавання, редагування та перегляду деталей предметів. Це дозволяє користувачам ефективно керувати своїми речами та отримувати детальну інформацію про кожен предмет.
Сторінка "Бренди" дозволяє користувачам керувати брендами, зокрема додавати нові бренди, редагувати існуючі та переглядати деталі. Компонент "Статистика" відображає різні статистичні дані, що допомагають користувачам отримувати аналітичні інсайти щодо використання своїх речей.
Бонусна система є важливою частиною додатку, що дозволяє бізнес-користувачам керувати бонусами та отримувати інформацію про їх ефективність. Адміністративна панель надає доступ до розширених функцій управління системою, включаючи експорт таблиць та перегляд детальної інформації про користувачів.
Коли компоненти визначені, можна спроектувати, як користувачі будуть використовувати веб-додаток, і для цього була розроблена діаграма діяльності користувача (див. рис. 2.3). Спочатку користувач має зареєструватися у додатку. Після реєстрації система визначає роль користувача, яка може бути Користувачем, Бізнес-користувачем або Адміністратором.
Користувач може обирати колекцію та переглядати предмети у ній. Далі він має можливість переглядати використання предметів та за потреби переглядати бонуси.
Бізнес-користувач може вибирати бренд, додавати бонусну систему та переглядати статистику.
Адміністратор отримує доступ до перегляду даних користувачів та редагування даних. Він також може переглядати бонуси від брендів.
Ця діаграма чітко ілюструє різні дії, які користувачі з різними ролями можуть виконувати у системі, що сприяє кращому розумінню функціоналу та взаємодії між компонентами системи.
В результаті концептуального моделювання предметної області, було розроблено чотири діаграми та визначені основні компоненти клієнтської частини системи. Тепер можна перейти до реалізації інженерних рішень.

3	ІНЖЕНЕРНІ РІШЕННЯ
3.1 Структура та технології проекту

Технології були для написання клієнтської частини були обрані виходячи з функціональних потреб системи та з особистого досвіду. Тому для написання клієнтської частини був обраний React у поєднанні з TypeScript. Він фокусується на реактивному програмуванні для інтерфейсів користувача, не визначаючи при цьому структуру всього додатку. Об'єднання TypeScript та React виправдовується низкою суттєвих переваг, які сприяють покращенню якості розробки веб-застосунків.
Для того, щоб забезпечити більш реактивне програмування був використаний MobX. MobX у поєднанні з React TypeScript надає простий і гнучкий спосіб управління станами в додатках. Воно забезпечує реактивне та декларативне програмування, що дозволяє розробникам легко синхронізувати стан додатку з його UI, роблячи код більш зрозумілим та легшим для підтримки. MobX автоматично відстежує залежності між станом та компонентами, оптимізуючи оновлення лише тих частин UI, які потребують змін, що забезпечує високу продуктивність.
Для роботи з датами та часом була обрана бібліотека “Moment”, котра є  однією з найпопулярніших бібліотек для роботи з датами та часом у React TypeScript проектах. Вона надає розробникам зручні функції для парсингу, перевірки, маніпуляції та форматування дат, враховуючи часові зони і локалізацію. 
Для локалізації була обрана бібліотека “i18next”, котра є потужним інструментом для локалізації додатків, пропонуючи гнучке та ефективне управління багатомовним контентом. Вона підтримує динамічну зміну мов у реальному часі, що дозволяє користувачам легко перемикати мови без перезавантаження сторінки. i18next також спрощує роботу з перекладами, надаючи можливість організації перекладів у окремі файли чи ресурси, що робить процес локалізації більш упорядкованим і підтримуваним.

3.2 Розробка користувацького інтерфейсу

Перш за все, новому користувача слід зареєструватися для того, щоб отримати повний фунціонал додатку. Для цього йому достатньо натиснути на кнопку “Register” на навігаційні панелі (див. розділ А.1 у додатку А). Після чого, відкриється сторінка (див. рис. 3.1) з полями для вводу даних. Обов’язковими полями є всі, крім номеру телефону. При вводі пошти та телефону, відбувається перевірка на правильність введення даних. Також, користувач має надати згоду на обробку його персональних даних.
Після реєстрації користувача зустрічає сторінка (див. рис. 3.2), де відображаються всі його колекції. Користувач може шукати колекції за іменем. Також він може створити нову колекцію та відредагувати або видалити вже існуючу. Користувач може переглянути предмети в колекції, натиснувши на в
кнопку “items”
На сторінці з предметами (див. рис. 3.3), користувач може переглянути всі предмети, котрі знаходяться в обраній колекції. На цій сторінці користувач може додати новий предмет, редагувати і переглянути детальну інформацію про предмет, натискаючи на відповідні кнопки.
На сторінці з деталями предмета (див. рис. 3.4) користувач може побачити статистику по використанню предмета за кожен місяць та побачити всі його використання.
Після натискання на піктограму тегу на сторінці відкриється діалогове вікно, де користувач зможе обрати датчик, котрий хоче прив’язати до предмета (див. рис. 3.5).
В залежності від кількості використання предметів однакового бренду, користувач отримує бонуси від цього бренду, котрі можна переглянути на окремій сторінці (див. рис. 3.6). Потрапити на цю сторінку можна натиснувши на кнопку “My Offers” у навігаційній панелі.
Після входу в аккаунт, бізнес користувача зустрічає сторінка (див. рис. 3.7) з відображенням всіх його брендів. На цій сторінці користувач може обрати що робити з брендом: редагувати, додати або видалити
Після натискання на кнопку “Bonus System”, бізнес користувач зможе побачити всі налаштовані бонусні системи для його брендів, зможе відредагувати та створити нові  (див. рис. 3.8).
На навігаційній панелі, бізнес користувач зможе відкрити список, де зможе обрати статистику, яку хоче отримати (див. рис. 3.9).
Одним з видів статистики, є комбінаційна статистика, яку можна відкрити натиснувши на кнопку “Combo Statistic”. Після натискання, користувач буде направлений на сторінку, де відображаються комбінації одягу його брендів (див. рис. 3.10). Всі виклики для отримання статистик знаходяться в окремому класі (див. розділ А.2 у додатку А).
Натиснувши на кнопку “Top Statistic”, перед користувачем з’явиться сторінка (див. рис. 3.11), де він може обрати діапазон дат, бренд, та кількість предметів в топі. В залежності від всіх вказаних даних, буде сформована статистика по кількістю використання за певний діапазон дат (див. розділ А.3 у додатку А). Статистика включає в себе кругову та стовбчасту діаграму (див. рис. 3.12).
Для того щоб переглянути статистику по сезонах, користувачу достатньо обрати пункт “Seasonal Statistics”. На цій сторінці (див. рис. 3.13) він зможе обрати бренд, за яким хоче отримати статистику. Після чого, буде побудована таблиця, кругова та стовбчаста діаграма, де буде зазначена кількість використань предметів цього бренду за сезон (див. рис. 3.14).
Користувач з роллю “Admin”, може блокувати користувачів, на спеціальній сторінці (див. рис. 3.14). Також він може проводити там пошук за електронною поштою та id. Адміністратор може робити копії даних, а саме копії таблиць, обравши пункт “Export Data” на навігаційні панелі. Також, адміністратор, може переглядати та редагувати будь-які дані в базі даних.
Для всіх сутностей у системі є форми для створення та редагування (див. рис. 3.16). Вони мають однакову структуру, а саме всі поля сутності та дві кнопки.

3.3 Панель адміністрування

Основною функціональністю панелі адміністрування є можливість перегляду, пошуку, редагування та видалення користувачів. Користувачі можуть бути знайдені за їх унікальним ідентифікатором або електронною поштою. Для цього у панелі передбачено поле пошуку, яке фільтрує список користувачів на основі введеного терміну. Крім цього, адміністратор має можливість керувати ролями користувачів. Для кожного користувача відображається випадаючий список, що містить доступні ролі: User, Business та Admin. Адміністратор може додавати користувача до певної ролі або видаляти його з ролі, використовуючи відповідні кнопки. Зміни ролей здійснюються без перезавантаження сторінки, що робить процес управління більш ефективним. Функціональність панелі адміністрування також включає можливість заблокувати та розблокувати користувачів. Користувачі, які були заблоковані, можуть бути розблоковані, а активні користувачі можуть бути заблоковані за допомогою відповідних кнопок. Також, адміністратор має змогу робити копії таблиць у форматі .csv. Таким чином, панель адміністрування є потужним інструментом для керування користувачами та їх ролями, зручною у використанні завдяки інтерактивному інтерфейсу.

4	ВИСНОВКИ

В результаті виконання лабораторної роботи, була розроблена та протестована клієнтська частина програмної системи. Були розроблені діаграми для кращого розуміння предметної області, архітектури компонентів та взаємодії між ними. Був записаний відеоролик, де були показані основні функції системи(DEMO: https://youtu.be/Acw6ePVaWvM)
