1 МЕТА РОБОТИ

Мета роботи полягає в розробці програмного забезпечення для IoT пристрою та написання звіту з описом інженерних рішень. Пристрій повинен бути частиною системи та взаємодіяти з нею. Під час виконання лабораторної роботи має бути розроблено чотири діаграми, а саме: UML діаграма взаємодії, UML діаграма компонентів, UML діаграма прецедентів та UML діаграму діяльності.

2 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРЕДМЕТНОЇ ОБЛАСТІ

Перед розробкою програмного забезпечення, слід визначити основні сценарії використання програмної системи. Для цього найкраще підходе UML діаграма прецедентів. Після аналізу функціоналу для ІоТ, котрий був визначений у документі Vision & Scope, була розроблена UML діаграма прецедентів (див. рис. 2.1), в котрій присутні три актори, а саме: ІоТ, користувач та бізнес-адміністратор. Всі актори отримали весь раніше визначений функціонал. Бізнес-адміністратор може робити початкове налаштування IoT системи, а саме налаштовувати конфігурацію для мереж та встановлення програмного коду.
Пристрій ІоТ може зчитувати інформацію з мітки, та робити запити до бази даних, в залежності від контексту, а саме: додавати нову мітку, оновлювати статус мітки та оновлювати кількість використань тегу.
Користувач може взаємодіяти з ІоТ, а саме сканувати мітки, при використанні одягу або ж обладнання.
Тепер слід визначити, з яких фізичних компонентів складається ІоТ частина системи. Для визначення компонентів, найкраще підходить UML діаграма компонентів, тому вона була розроблена (див. рис. 2.2). На діаграмі можна бачити, що для ІоТ частини було використано мікроконтролер Raspberry Pi Zero W. За допомогою вбудованого модулю WiFi можна підключатися до мережі та взаємодіяти з хмарними сервісами через бездротову мережу. До цієї плати був під’єднаний RFID модуль, а саме PN532 котрий буде відправляти значення до головного мікроконтролера. Мікроконтролер та RFID модуль пов’язані між собою через протокол зв’язку SPI, який дозволяє передавати дані між мікроконтролером та пристроєм, використовуючи всього кілька провідників і забезпечити високу швидкість передачі даних.
Коли актори визначені та відомі компоненти ІоТ частини, треба розробити діаграму взаємодії (див. рис. Б.2 у додатку Б), котра відображає перебіг процесів у програмному забезпеченні. ІоТ частина системи складається з одного пристрою та модулем для нього. Модуль зчитує інформацію з мітки та передає їх на обробку до мікроконтролера. Після чого йде відправка HTTP запиту до серверної частини, для отримання інформації за ідентифікатором мітки. Якщо ідентифікатор не знайдений, то буде відправлений новий HTTP запит для створення нової мітки у базі даних.
Якщо ж інформація за отриманим ідентифікатором є, то буде відправлений HTTP запит на зміну статусу мітки.
В результаті концептуального моделювання предметної області, було розроблено три діаграми та визначені основні сутності програмної системи. Тепер можна перейти до реалізації інженерних рішень.

3 ІНЖЕНЕРНІ РІШЕННЯ
3.1 Загальна інформація про технологічні рішення для ІоТ частини системи

Технології були для написання ІоТ частини були обрані виходячи з функціональних потреб системи. Оскільки було прийнято рішення використовувати мікроконтролер Raspberry Pi Zero W, то був вибір, яку мову програмування використовувати. Після аналізу всіх технічних вимог, було прийнято рішення використовувати Python. Вибір Python був обґрунтований наявністю багатьох бібліотек для роботи з модулями та мікроконтролерами, що використовуються у системі. В якості основної бібліотеки, було використано adafruit_pn532.spi, котра надає змогу створювати взаємодіяти з RFID модулем.
Додатково до вибору Python та бібліотеки adafruit_pn532.spi для взаємодії з RFID модулем, інженерні рішення також були зосереджені на інтеграції мікроконтролера з іншими компонентами системи через SPI (Serial Peripheral Interface). SPI був обраний через його швидкість та ефективність у використанні для коротких відстаней між пристроями, що ідеально підходить для взаємодії мікроконтролерів із периферійними модулями. SPI інтерфейс дозволяє здійснити швидку та надійну передачу даних між Raspberry Pi Zero W та RFID читачем, що є критично важливим для систем, де вимагається миттєва реакція на зчитування тегів. Використання SPI в даному контексті забезпечує низьке енергоспоживання та високу швидкість передачі, що робить його відмінним вибором для таких застосувань.
Для інтеграції IoT компонентів з веб-сервісами була використана бібліотека requests, що дозволяє управляти статусами RFID тегів через API. Це забезпечує можливість легкої інтеграції з іншими частинами системи та зовнішніми сервісами, розширюючи функціональність системи та забезпечуючи зручність її масштабування та управління.

3.2 Реалізація алгоритму обробки даних з міток

Головна ціль мого ІоТ, це зчитування даних з мітки, та оновлення даних на серверній частині, тому треба було реалізувати ефективний алгоритм, для обробки даних. Перш за все, йде налаштування з’єднання(див. рядок. 12-14, розділ А.1 у додатку А) між мікроконтролером та RFID модулем, за допомогою методів з бібліотеки adafruit_pn532.spi. Після чого, запускається цикл, котрий очікує на мітку. Після зчитування мітки, починається математична обробка ідентифікатора, за допомогою власно розробленої функції format_uid.
Функція format_uid (див. рядок. 16, розділ А.1 у додатку А) відповідає за перетворення бінарного представлення UID, отриманого з RFID-мітки, в шістнадцятковий формат. Це перетворення забезпечується шляхом ітерації по кожному байту UID, розбиття його на старші та молодші ніббли (чотирибітні частини байта), які потім конвертуються у символи за допомогою ASCII кодування (див. рядок. 19-25, розділ А.1 у додатку А). Кожен ніббл трансформується в шістнадцятковий символ, що дозволяє представити байт у вигляді двох символів (наприклад, байт 0xAB представляється як символи 'A' та 'B'). Окрім формування текстового представлення UID, у функції відбувається розрахунок контрольної суми, яка є результатом сумування усіх байтів UID, обмеженим одним байтом (через взяття залишку від ділення суми на 256) (див. рядок. 26, розділ А.1 у додатку А). Результатом цих операцій є формування унікального ідентифікатора мітки у форматі, що включає контрольну суму, що дозволяє контролювати цілісність ідентифікатора при подальшій обробці. Використання такої математичної обробки на стороні клієнта дозволяє зменшити навантаження на серверну частину системи, оптимізувавши обробку даних. Це важливо в контексті систем IoT, де кожен компонент системи повинен бути оптимізований для ефективної роботи в умовах обмеженого обчислювального та енергетичного ресурсу. Функція format_uid забезпечує не тільки формування стандартного представлення UID, а й впровадження додаткової перевірки на помилки, що підвищує надійність і точність системи ідентифікації RFID.
Після формування унікального ідентифікатора RFID-мітки за допомогою функції format_uid, код реалізує взаємодію з серверною частиною через API для управління даними RFID-міток. Перевірка наявності мітки в базі даних здійснюється через GET-запит до API (див. рядок. 39, розділ А.1 у додатку А), що використовує вже сформований UID для ідентифікації мітки. Якщо мітка існує (сервер повертає успішний відповідь з статусом 200 та наявними даними), код виконує PUT-запит (див. рядок. 42, розділ А.1 у додатку А) для оновлення статусу мітки, ініціюючи логіку оновлення на сервері, яка може включати, наприклад, зміну статусу доступу чи оновлення інших параметрів, залежно від системних вимог.
У випадку, коли мітка не виявляється в базі даних (сервер повертає відповідь зі статусом, що не вказує на успішне знаходження), код реалізує POST-запит для створення нового запису про мітку (див. рядок. 49, розділ А.1 у додатку А), передаючи UID як частину тіла запиту у форматі JSON. Це дозволяє автоматично реєструвати нові мітки в системі, що є критично важливим для динамічних систем ідентифікації, де нові мітки можуть регулярно вводитись в обіг.
Правильна робота цього алгоритму є дуже важливою для подальшої розробки системи, оскільки саме завдяки ньому, до бази даних буде надходити актуальна інформація про використання речей, що напряму впливає на бізнес логіку системи. Для того, щоб зрозуміти краще як працю цей алгоритм, слід переглянути UML діаграму діяльності (див. рис. Б.1 у додатку Б).

4 ВИСНОВКИ

В результаті виконання лабораторної роботи, була розроблена та протестована ІоТ частина програмної системи. Були розроблені діаграми для кращого розуміння предметної області, архітектури системи та взаємодії IoT з серверною частиною. Був записаний відеоролик, де були показані основні функції ІоТ частини та робота з сторінкою для налаштування (DEMO: https://youtu.be/yflxeCNMips).
